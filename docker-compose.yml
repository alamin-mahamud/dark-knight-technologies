version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: dark-knight-postgres
    environment:
      POSTGRES_DB: dark_knight_technologies
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5410:5432"
    networks:
      - dark-knight-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dark-knight-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5410/dark_knight_technologies
      CORS_ORIGINS: http://localhost:3010,http://frontend:3010
      ENVIRONMENT: production
    ports:
      - "8010:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dark-knight-network
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8010
    container_name: dark-knight-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8010
      NODE_ENV: production
    ports:
      - "3010:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dark-knight-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: dark-knight-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8110:80"
      - "44310:443"
    depends_on:
      - frontend
      - backend
    networks:
      - dark-knight-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  dark-knight-network:
    driver: bridge
